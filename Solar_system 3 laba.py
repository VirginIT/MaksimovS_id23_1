{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a77a1824-5df5-4a84-8c48-36b54864e8ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-13 17:39:15.482 python[76663:1993949] +[IMKClient subclass]: chose IMKClient_Legacy\n",
      "2024-11-13 17:39:15.482 python[76663:1993949] +[IMKInputSession subclass]: chose IMKInputSession_Legacy\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "import math\n",
    "import numpy as np\n",
    "from tkinter import Scale\n",
    "\n",
    "root = tk.Tk()\n",
    "root.title(\"Солнечная система\")\n",
    "root.geometry(\"1600x800\")\n",
    "\n",
    "canvas = tk.Canvas(root, bg=\"black\")\n",
    "canvas.pack(fill=tk.BOTH, expand=True)\n",
    "\n",
    "# UI элементы для управления параметрами астероида\n",
    "mass_scale = Scale(root, from_=1, to=10, label=\"Масса\", orient=\"horizontal\")\n",
    "mass_scale.pack(side=\"left\")\n",
    "speed_scale = Scale(root, from_=1, to=10, label=\"Скорость\", orient=\"horizontal\")\n",
    "speed_scale.pack(side=\"left\")\n",
    "\n",
    "click_start = None\n",
    "click_end = None\n",
    "\n",
    "def draw_circle(x, y, radius, color):\n",
    "    return canvas.create_oval(x - radius, y - radius, x + radius, y + radius, fill=color, outline=\"black\")\n",
    "\n",
    "class Planet:\n",
    "    def __init__(self, x, y, radius, color, distance, speed, satellites=[]):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "        self.radius = radius\n",
    "        self.color = color\n",
    "        self.distance = distance\n",
    "        self.speed = speed\n",
    "        self.angle = 0\n",
    "        self.satellites = satellites\n",
    "        self.mass = radius  # масса пропорциональна радиусу\n",
    "\n",
    "    def draw(self):\n",
    "        x = self.x + self.distance * math.cos(self.angle)\n",
    "        y = self.y + self.distance * math.sin(self.angle)\n",
    "        draw_circle(x, y, self.radius, self.color)\n",
    "        for satellite in self.satellites:\n",
    "            satellite.update_position(x, y)\n",
    "            satellite.draw()\n",
    "\n",
    "    def update_position(self):\n",
    "        self.angle += self.speed\n",
    "\n",
    "    def check_collision(self, asteroid):\n",
    "        dist = math.sqrt((self.x + self.distance * math.cos(self.angle) - asteroid.x) ** 2 + \n",
    "                         (self.y + self.distance * math.sin(self.angle) - asteroid.y) ** 2)\n",
    "        return dist < self.radius + asteroid.radius\n",
    "\n",
    "    def absorb_asteroid(self, asteroid):\n",
    "        self.mass += asteroid.mass\n",
    "        self.radius += math.sqrt(asteroid.mass) / 2  # увеличение радиуса пропорционально массе\n",
    "\n",
    "class Satellite:\n",
    "    def __init__(self, radius, color, distance, angle, speed):\n",
    "        self.radius = radius\n",
    "        self.color = color\n",
    "        self.distance = distance\n",
    "        self.speed = speed\n",
    "        self.angle = angle\n",
    "        self.x = 0\n",
    "        self.y = 0\n",
    "\n",
    "    def update_position(self, parent_x, parent_y):\n",
    "        self.angle += self.speed\n",
    "        self.x = parent_x + self.distance * math.cos(self.angle)\n",
    "        self.y = parent_y + self.distance * math.sin(self.angle)\n",
    "\n",
    "    def draw(self):\n",
    "        draw_circle(self.x, self.y, self.radius, self.color)\n",
    "\n",
    "class Asteroid:\n",
    "    def __init__(self, x, y, radius, color, speed, angle, mass):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "        self.radius = radius\n",
    "        self.color = color\n",
    "        self.speed = speed\n",
    "        self.angle = angle\n",
    "        self.mass = mass\n",
    "\n",
    "    def update_position(self):\n",
    "        self.x += self.speed * math.cos(self.angle)\n",
    "        self.y += self.speed * math.sin(self.angle)\n",
    "\n",
    "    def draw(self):\n",
    "        draw_circle(self.x, self.y, self.radius, self.color)\n",
    "\n",
    "# Список всех планет и их спутников, как в оригинальном коде\n",
    "earth_r = 5\n",
    "satellites_earth = [Satellite(2, \"gray\", 12, 0, 0.1)]\n",
    "satellites_mars = [Satellite(1, \"gray\", 9, 0, 0.1), Satellite(1, \"gray\", 11, 180, 0.08)]\n",
    "satellites_jupiter = [\n",
    "    Satellite(3.4, \"burlywood2\", 71, 0, 0.07), Satellite(3, \"cornsilk2\", 65.5, 0, 0.06),\n",
    "    Satellite(2.3, \"darkolivegreen3\", 70, 0, 0.055), Satellite(2, \"darksalmon\", 68, 180, 0.065),\n",
    "    Satellite(1.8, \"coral\", 73, 0, 0.08), Satellite(1.6, \"gray\", 67, 180, 0.05),\n",
    "    Satellite(1.3, \"gray\", 65, 0, 0.095), Satellite(1.2, \"gray\", 74, 180, 0.075),\n",
    "    Satellite(1.1, \"gray\", 72, 0, 0.09), Satellite(1, \"gray\", 77, 180, 0.08)\n",
    "]\n",
    "satellites_saturn = [\n",
    "    Satellite(4, \"darkolivegreen4\", 69, 0, 0.07), Satellite(3, \"gray\", 63.5, 0, 0.06),\n",
    "    Satellite(2, \"darkolivegreen3\", 68, 0, 0.045), Satellite(1.75, \"coral\", 66, 180, 0.065),\n",
    "    Satellite(1.65, \"gray\", 71, 0, 0.08), Satellite(1.5, \"gray\", 69, 180, 0.05),\n",
    "    Satellite(1, \"gray\", 63, 0, 0.095)\n",
    "]\n",
    "satellites_uran = [\n",
    "    Satellite(2, \"cornsilk2\", 39, 0, 0.07), Satellite(1.95, \"cornsilk2\", 33.5, 180, 0.06),\n",
    "    Satellite(1.5, \"gray\", 38, 0, 0.05), Satellite(1.3, \"blue\", 36, 180, 0.065),\n",
    "    Satellite(1.1, \"gray\", 41, 0, 0.08)\n",
    "]\n",
    "satellites_neptun = [\n",
    "    Satellite(2.5, \"mediumpurple1\", 39, 0, 0.07), Satellite(1.2, \"maroon\", 33.5, 180, 0.06),\n",
    "    Satellite(1.05, \"gray\", 34, 0, 0.05), Satellite(0.75, \"gray\", 36, 180, 0.065)\n",
    "]\n",
    "\n",
    "planets = [\n",
    "    Planet(800, 400, earth_r*0.38, \"gray\", 58, 0.0478),\n",
    "    Planet(800, 400, earth_r*0.95, \"orange\", 88, 0.035),\n",
    "    Planet(800, 400, earth_r, \"chartreuse3\", 129.6, 0.0298, satellites_earth),\n",
    "    Planet(800, 400, earth_r*0.53, \"red\", 208, 0.0241, satellites_mars),\n",
    "    Planet(800, 400, earth_r*11.2, \"chocolate3\", 350, 0.013, satellites_jupiter),\n",
    "    Planet(800, 400, earth_r*9.45, \"darkgoldenrod2\", 460, 0.0096, satellites_saturn),\n",
    "    Planet(800, 400, earth_r*4, \"cyan\", 560, 0.0068, satellites_uran),\n",
    "    Planet(800, 400, earth_r*3.88, \"cyan4\", 700, 0.0054, satellites_neptun)\n",
    "]\n",
    "\n",
    "asteroids = []\n",
    "\n",
    "# События для создания астероидов\n",
    "def create_asteroid(event):\n",
    "    global click_start\n",
    "    click_start = (event.x, event.y)\n",
    "\n",
    "def set_asteroid_direction(event):\n",
    "    global click_start, click_end\n",
    "    if click_start:\n",
    "        click_end = (event.x, event.y)\n",
    "        dx, dy = click_end[0] - click_start[0], click_end[1] - click_start[1]\n",
    "        angle = math.atan2(dy, dx)\n",
    "        speed = speed_scale.get() / 10\n",
    "        mass = mass_scale.get()\n",
    "        asteroid = Asteroid(click_start[0], click_start[1], mass, \"gray\", speed, angle, mass)\n",
    "        asteroids.append(asteroid)\n",
    "\n",
    "def update_animation():\n",
    "    canvas.delete(\"all\")\n",
    "    sun = draw_circle(800, 400, 50, \"yellow\")\n",
    "    for planet in planets:\n",
    "        planet.update_position()\n",
    "        planet.draw()\n",
    "    for asteroid in asteroids:\n",
    "        asteroid.update_position()\n",
    "        asteroid.draw()\n",
    "        # Проверка столкновения астероида с планетами\n",
    "        for planet in planets:\n",
    "            if planet.check_collision(asteroid):\n",
    "                planet.absorb_asteroid(asteroid)\n",
    "                asteroids.remove(asteroid)\n",
    "                break\n",
    "    root.after(20, update_animation)\n",
    "\n",
    "canvas.bind(\"<Button-1>\", create_asteroid)\n",
    "canvas.bind(\"<ButtonRelease-1>\", set_asteroid_direction)\n",
    "\n",
    "update_animation()\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5834885c-947c-4acb-83a1-1ff4c185d307",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
